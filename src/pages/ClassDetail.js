import React, { useState, useCallback, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import API from "../services/api";
import { Modal, Button } from "react-bootstrap";
import "bootstrap/dist/css/bootstrap.min.css";
import "../App.css";
import "../styles/classdetail.css";

const ClassDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();
  const token = sessionStorage.getItem("token");

  const [classInfo, setClassInfo] = useState(null);
  const [requests, setRequests] = useState([]);
  const [activeSession, setActiveSession] = useState(null);
  const [showCheckinTimeInputs, setShowCheckinTimeInputs] = useState(false);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showFaceModal, setShowFaceModal] = useState(false);

  const fetchClassDetail = useCallback(async () => {
    try {
      const res = await API.get(`/classes/${id}`);
      setClassInfo(res.data);
    } catch {}
  }, [id]);

  const fetchActiveSession = useCallback(async () => {
    try {
      const res = await API.get(`/checkin-sessions/class/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setActiveSession(res.status === 204 ? null : res.data);
    } catch {
      setActiveSession(null);
    }
  }, [id, token]);

  const fetchRequests = useCallback(async () => {
    try {
      const res = await API.get("/enrollments/messages", {
        headers: { Authorization: `Bearer ${token}` },
      });
      const filtered = res.data.filter(r => r.classId?._id === id || r.classId === id);
      setRequests(filtered);
    } catch {}
  }, [id, token]);

  useEffect(() => {
    fetchClassDetail();
    fetchActiveSession();
    fetchRequests();
  }, [fetchClassDetail, fetchActiveSession, fetchRequests]);

  const updateField = (field, value) =>
    setClassInfo(prev => ({ ...prev, [field]: value }));

  const handleOpenSession = async () => {
    if (!classInfo.openAt || !classInfo.closeAt) return alert("‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤");

    if (classInfo.withTeacherFace && !user.faceScanned) {
      setShowFaceModal(true);
      return;
    }

    try {
      let { latitude, longitude } = classInfo;

      if (!classInfo.withMapPreview) {
        const pos = await new Promise((resolve, reject) =>
          navigator.geolocation.getCurrentPosition(resolve, reject, {
            enableHighAccuracy: true, timeout: 10000,
          })
        );
        latitude = pos.coords.latitude;
        longitude = pos.coords.longitude;
      }

      await API.post("/checkin-sessions/open", {
        classId: id,
        openAt: classInfo.openAt,
        closeAt: classInfo.closeAt,
        withTeacherFace: classInfo.withTeacherFace || false,
        withMapPreview: classInfo.withMapPreview || false,
        location: {
          latitude,
          longitude,
          radiusInMeters: classInfo.radius || 100,
          name: classInfo.locationName || "",
        },
      }, { headers: { Authorization: `Bearer ${token}` } });

      setShowSuccessModal(true);
    } catch (err) {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î session ‡πÑ‡∏î‡πâ");
    }
  };

  const handleCloseSession = async () => {
    try {
      await API.put(`/checkin-sessions/cancel/${activeSession._id}`, {}, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setActiveSession(null);
      alert("‚úÖ ‡∏õ‡∏¥‡∏î session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } catch {
      alert("‚ùå ‡∏õ‡∏¥‡∏î session ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  return (
    <div className="container">
      <h3>üìò ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h3>
      <p><strong>‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤:</strong> {classInfo?.courseCode}</p>
      <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤:</strong> {classInfo?.courseName}</p>
      <p><strong>‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</strong> {classInfo?.section}</p>
      <p><strong>‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå:</strong> {classInfo?.teacherId?.fullName}</p>

      {activeSession ? (
        <>
          <hr />
          <h5>üïê Session ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î</h5>
          <table className="table table-bordered">
            <thead>
              <tr><th>‡∏ß‡∏±‡∏ô</th><th>‡πÄ‡∏õ‡∏¥‡∏î</th><th>‡∏õ‡∏¥‡∏î</th><th>‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤</th><th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th><th>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</th></tr>
            </thead>
            <tbody>
              <tr>
                <td>{new Date(activeSession.openAt).toLocaleDateString()}</td>
                <td>{new Date(activeSession.openAt).toLocaleTimeString()}</td>
                <td>{new Date(activeSession.closeAt).toLocaleTimeString()}</td>
                <td>{activeSession.withTeacherFace ? "‡πÉ‡∏ä‡πà" : "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"}</td>
                <td><span className="badge bg-success">{activeSession.status}</span></td>
                <td><button className="btn btn-danger btn-sm" onClick={() => setShowConfirmModal(true)}>‡∏õ‡∏¥‡∏î</button></td>
              </tr>
            </tbody>
          </table>
        </>
      ) : (
        <>
          <hr />
          <h5 className="text-muted">‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ session ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà</h5>
        </>
      )}

      <Modal show={showConfirmModal} onHide={() => setShowConfirmModal(false)} centered>
        <Modal.Body>‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏õ‡∏¥‡∏î session ‡∏ô‡∏µ‡πâ?</Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowConfirmModal(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Button>
          <Button variant="danger" onClick={() => { setShowConfirmModal(false); handleCloseSession(); }}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showSuccessModal} onHide={() => setShowSuccessModal(false)} centered>
        <Modal.Body>‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤</Modal.Body>
        <Modal.Footer>
          <Button onClick={() => setShowSuccessModal(false)}>‡∏ï‡∏Å‡∏•‡∏á</Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showFaceModal} onHide={() => setShowFaceModal(false)} centered>
        <Modal.Body>‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á</Modal.Body>
        <Modal.Footer>
          <Button onClick={() => navigate("/save-face-teacher")}>‡πÑ‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Button>
        </Modal.Footer>
      </Modal>

      <hr />
      <h5 onClick={() => setShowCheckinTimeInputs(x => !x)} style={{ cursor: "pointer" }}>
        üìÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ {showCheckinTimeInputs ? "‚¨ÜÔ∏è" : "‚¨áÔ∏è"}
      </h5>

      {showCheckinTimeInputs && (
        <div className="row mb-3 align-items-end">
          <div className="col-md-3">
            <input type="datetime-local" className="form-control" value={classInfo.openAt || ""} onChange={e => updateField("openAt", e.target.value)} />
          </div>
          <div className="col-md-3">
            <input type="datetime-local" className="form-control" value={classInfo.closeAt || ""} onChange={e => updateField("closeAt", e.target.value)} />
          </div>
          <div className="col-md-3">
            <input type="checkbox" className="form-check-input me-2" checked={classInfo.withTeacherFace || false} onChange={e => updateField("withTeacherFace", e.target.checked)} /> ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            <br />
            <input type="checkbox" className="form-check-input me-2 mt-2" checked={classInfo.withMapPreview || false} onChange={e => updateField("withMapPreview", e.target.checked)} /> ‡πÉ‡∏ä‡πâ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
          </div>
          <div className="col-md-3">
            <button className="btn btn-primary w-100" onClick={handleOpenSession}>‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ClassDetail;
